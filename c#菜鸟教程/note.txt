c#是一个现代的，通用的，面向对象的编程语言


c#是专门为公共语言基础机构(CLI)设计的，CLI由可执行代码和运行时环境组成，
允许在不同的台计算机平台和体系结构上使用高级余元

１．现代的，通用的编程语言
２．面向对象
３．面向组件
４．容易学习
５．　结构化语言
６．　它产生高效率的程序
７．　它可以在多种计算机平台编译
８． .Net框架的一部分


c#的一些重要功能

１．布尔条件
２．自动垃圾回收
３．标准库
４．　组件版本
５．　属性和事件
6. 委托和事件管理
７．易于使用的泛型
８．　索引器
９．　条件编译
１０．简单的多线程
１１．　LINQ 和Lambda表达式
12. 集成Windows

c# 环境

c#是.net框架的一部分，且用于编写.net应用程序

.net框架(.net　framework)

.net框架是一个创新的平台，能够编写出下面的应用程序：

１．windows应用程序
2.web 应用程序
３．　web服务

.net框架应用程序是多平台的应用程序。框架的设计方式使它们
适用于下列各种语言：
c#,c++,cobol等


.net框架由一个巨大的代码库组成，用于c#等客户端语言
下面列出一些.net框架的组件

１．公共语言运行库(Common Language Runtime-CLR)
2. .net框架类库(.Net Framework Class Library)
3. 公共语言规范
4.通用类型系统
５．元数据(metadata)和组件(assembilies)
6. Windows窗体(Windows Froms)
7. ASP.Net和ASP.Net.AJAX
8.ADO.net
9. Windows 工作流基础(Windows workflow Foundation -WF)
10. Windows 显示基础
11. Windows通信基础(WCF)
12. LINQ

C#程序结构(7部分)

一个C#程序主要包括一下部分：
１．命名空间声明(Namespace declaration)

2.一个class
3.Class方法
４．Class属性
５．　一个Main方法
６．　语句(Statements)　&表达式(Expressions)
7.注释


注意几点

１．c#是大小写敏感的
２．所有的语句和表达式必须以分号(;)结尾
３．程序的执行从Main方法开始
４．与Java不同，文件名可以不同于类的明后才能够

ｃ
c#基本语法，是一种面向对象的编程语言。
在面向对象的程序设计方法中，程序由多种相互交互的对象组成，
相同种类的对象通常是具有相同的类型，是在相同的class中

using关键字

用于在程序中包含命名空间。一个程序可以包含多个using语句

class关键字用于声明一个类

c#注释用于解析代码　　/**/

成员变量

变量是类的属性或数据成员，用于存储数据

成员函数

函数是一系列执行指定任务的语句。类的成员函数实在类
内声明的。


实例化一个类

标识符

标识符是用来识别类，变量，函数或任何其他用户定义的项目

1.标识符必须以字母，下划线或@开头
２．标识符中的第一个字符不能是数字
3.标识符必须不包含任何嵌入的空格或符号
４．　标识符不能是c#关键字。
５．标识符必须区分大小写
６．不能与c#的类库名称相同


c#关键字

保留关键字

abstract as base bool break byte case
catch char checked class const continue decimal
default delegate do double else enum event
explicit extern false finally fixed float for
foreach goto if implicit in in(generic modifier) int
interface internal is lock long namespace new
null object operate out out(generic modifier) override parames
private protected public readonly ref return sbyte
sealed short sizeof stackalloc static string struct

switch this throw true try typeof uint
ulong unchecked unsafe ushort using virtual void
volatile while

上下文关键字

add alias ascending descending dynamic from get
global group into join let orderby partial(type)
partial(method) remove select set



c#数据类型

在c#中，变量分为以下几种类型：
１．值类型
2.引用类型
３．指针类型


值类型
值类型变量可以直接分配个一个值。它从类System.ValueType中派生的
值类型直接包含数据。
比如int,char,float分别存储数字，字符，浮点数。
当声明一个int类型时，系统分配内存来存储值


bool,byte,char,decimal,double,float,int,long,sbyte
short,unit,ulong,ushort,


如需得到一个类型或一个变量在特定平台上的准确尺寸，可以使用sizeof方法。

表达式sizeof(type)产生以字节为单位存储对象或类型的存储尺寸


引用类型

引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用
它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。
如果内位置的数据是由一个变量改变的，其他变量会自动反映这种值的变量

内置的引用类型有:object,dynamic,string

对象(Object)类型

对象类型是c#通用类型系统(CTS)中所有数据类型的终极基类。
Object是System.Object类的别名。所以对象(Object)类型可以被分配
任何其他类型(值类型，引用类型，预定义类型或用户自定义类型)
的值。但，在分配值之前，需要先进行类型转换

当一个值类型转换为对象类型时，则被称为装箱;
另一方面，当一个对象类型转换为值类型时，称为拆箱

object obj;
obj = 100;// 这是装箱


动态类型

可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的

声明动态类型的语法：

dynamic <variable_name> = value;
dynamic d = 20;


动态而理性与对象类型相似，但是对象类型变里的类型检查是在编译时发生的，
而动态类型变量的类型价差是在运行时发生的。

字符串()乐行

字符串类型允许给变量分配任何字符串值。
字符串类型是Sytem.String类的别名。
它是从对象(Object)类型派生的。
字符串类型的值可以通过两种形式进行分配：引号和@引号

String str = "sadf";

一个@引号字符串

@"asdf";

C#string字符串的起那么可以加@(称作"逐字字符串")将转义字符(\)当做普通
字符对待

string str = @"c:\asdf";
等价于
string str="c:\\Windsows";


@字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内


string str=@"sdaf"


用户自定义引用类型有：class,interface或delegate,

指针类型

指针类型变量存储另一种类型的内存地址。
c#中的指针与c/c++具有相同的功能


声明指针类型的语法：


type* identifier

char* cptr;
int* iptr;
C# 类型转换

类型转换从根本上说是类型铸造，或把数据从一个类型转换成另一种类型。
在c#中，类型铸造有两种形式：

１．　隐式类型转换－这些转换是c#默认的以安全方式进行的转换，不会
导致数据丢失。例如，从晓得整数类型转换为大的整数类型，从派生类转换为基类

２．显式类型转换－即强制类型转换。显式转换需要强制转换运算符，
而且强制转换会造成数据丢失

c#　类型转换方法

１．ToBoolean

2. ToByte
3. ToChar
4. ToDateTime
5. ToDecimal
6. ToDouble
7. ToInt16
8. ToInt32
9. ToInt64
10. ToSbyte
11. ToSingle
12. ToString
13. ToType



c# 变了呢

一个变量只不过是一个供程序操作的存储区的名字，在c#中，每个变量都有一个特定的
类型，类型决定了变量的内存大小和布局。范围内的值可以存储在内存中，
可以对变量进行一系列操作

c#中提供的基本的值类型分为以下几类：

１．整数类型　　sbyte,byte,short,ushort,int,uint,long,ulong,char
2. 浮点型　　float,double
3. 十进制类型　　　decimal
4. 布尔类型　　true,false,指定的值
５．空类型　　可为空值的数据类型

c#允许定义其他值类型的变量，比如enum,也允许定义引用类型变量，
比如class. 

c#中的变量定义


C#中变量定义的语法

<data_type><variable_list>;


在这里，data_type必须是一个有效的C#数据类型，可以是char,int,float,double
或其他用户自定义的数据类型。
variable_list可以由一个或多个逗号的标识符名称组成

int i,j,k;
char c,ch;
float f,salary;
double d;

可以在变量定义时进行初始化

int i =100;


c#中的变量初始化

变量通过在等号后跟一个常量表达式进行初始化(赋值)。初始化的一般形式为：

variable_name =value;

变量可以在声明时被初始化(指定一个初始值)
初始化由一个等号后面跟一个常量表达式组成


int d =3, f=5;
byte z = 22;
double pi =3.14;
char x ="x";


接受来自用户的值

System命名空间中的Console类提供了一个函数ReadLine(),用于接收
来自用户的输入，并把它存储到一个变量中


int num;
num = Convert.ToInt32(Console.ReadLine());


函数Convert.ToInt32()把用户输入的数据转换为int数据乐行，
因为Console.ReadLine()只接受字符串格式的数据

c#中的Lvalues和Rvalues

c#　中的两种表达式

１．　lvalue表达式可以出现在赋值语句的左边或右边
２．　rvalue表达式可以出现在赋值语句的右边，不能出现在赋值语句的左边


c#常量

常量是固定值，程序执行期间不会改变。常量可以是任何最基本数据类型，比如整数常量
浮点常量，字符常量或字符串常量，还有枚举常量


常量可以被当做常规的变量，只是它们的值在定义以后不能被修改


整数常量可以是十进制，八进制或十六机制常量

浮点常量

一个浮点常量是由整数部分，小数点，小数部分或指数部分组成

可以使用小数形式或指数形式来表示浮点常量


3.145

使用小数形式表示时，必须包含小数点，指数或同时包含两者。
使用指数形式表示时，必须包含整数部分，小数部分，或同时包含两者

有符号的指数是用e或E表示的


字符常量

字符常量是括在单引号里的，例如，'x'，且可存储在一个简单的字符类型变量中。
一个字符常量可以是一个不同字符(例如'x')，一个转义序列(例如'\t')
或一个通用字符(例如'\u02C0')

在c#中有一些特定的字符，当它们的前面带有反斜杠时有特殊的意义，
可用于表示换行符(\n)或制表符tab(\t)

\\
\`
\"
\?
\a


字符串常量

字符串常量是括在双引号""里，或是括在@""里。字符串常量包含的字符与字符常量相似，
可以是普通字符，转义序列或通用字符


使用字符串常量时，可以把一个很长的行拆成多个行，可以使用空格分隔各个部分

这里是

string a = "hello world!";
string b = @"hello world";

定义常量

常量是使用const关键字来定义的，定义一个常量的语法如下

const <data_type><constant_name> =value;

c#运算符

运算符是一种告诉编译器执行特定的数据或逻辑操作的符号

算术运算符

+ - * / %  ++ --

关系运算符

== !=   >  <   >= <= 


逻辑运算符
&&   || !

位运算

赋值运算

= +=  -=

*= /= %=
<<=  >>=
&=
^=
|=

其他运算符

sizeof()  返回数据类型的大小　　　sizeof(int),将返回4
typeof()  返回class的类型　　type(StreamReader);
&  返回变量的地址　　　&a:将指向一个变量
* 变量的指针　　　　*a:将指向一个变量

？：　　条件表达式　　　如果条件为真？则为x:否则为y

is   判断对象是否为某一类型　if(Ford is Car)// 检查Ford 是否是Car类的一个对象

as 强制转换，即使转换失败也不会抛出异常　　Object obj = new Sr

c#判断

判断结构要求程序员指定一个或多个要评估或测试的条件，
以及条件为真时要执行的语句

判断语句

if 
if...else
嵌套if语句
switch语句　一个switch允许测试一个变量等于多个值时的情况

?:运算符

exp1 ? expr2:expr3

循环类型

while 循环：给当给定条件为真时，重复语句或语句组，它会在执行循环主体之前测试条件
for/foreach循环　多次执行一个语句序列，简化管理循环变量的代码
do...while循环：除了它是在循环主体结尾测试条件外，其他与while语句类型
嵌套循环　　可以在while,for,或do...while循环内使用一个或多个循环、


foreach

c#也支持foreach循环，使用foreach可以迭代数组或一个集合对象

１．通过foreach循环输出整型数组中的水元素
２．通过for循环输出整型数组中的元素
３．foreach循环设置数组元素的计算器


while循环

只要给定的条件为真，c#中的while循环语句会重复执行一个目标语句

循环控制

break语句：　终止loop,switch语句，程序流将继续执行紧接着loop或,switch的吓一跳语句

continue: 引起循环跳过主体的剩余部分，立即重新开始测试条件

c#封装
封装被定义为“把一个或多个项目封闭在一个物理的或逻辑的包中”
在面向对象程序设计方法论中，封装是为了防止对实现细节的访问

抽象和封装是面向对象程序设计的相关特性。抽象允许相关信息可视化，
封装则使开发者试下所需级别的抽象

c#封装根据具体的需求，设置使用者的访问权限，并通过访问修饰符来实现。


一个访问修饰符定义了一个类成员的范围和可见性。c#支持的访问修饰符
１．public:所有对象都可以访问
２．private:对象本身在对象内部都可以访问
３．　protected:只有该类对象及其子类对象可以访问
４．　internal:同一个程序集的对象可以访问
５．protected internal:访问限于大年程序集或派生自包含类的类型

Public访问修饰符允许一个类将其成员变量和成员函数暴露给其他的函数和对象
任何公有成员可以被外部的类访问


Private访问修饰符允许一个类将其成员变量和成员函数对其他的函数和对象进行吟唱。
只有同一个类中的函数可以访问它的私有成员。
即使是类的实例也不能访问它的私有程雨涵

Proteced访问修饰符　允许子类访问它的基类的成员变量和成员函数。
这样有助于实现继承。
Internal访问修饰符

Internal访问说明符允许一个类将其成员变量和成员函数暴露给当前程序
中的其他函数和对象，
带有internal访问修饰符的任何成员可以被定义在该成员多定义的应用程序
内的任何类或方法访问


Protected Internal访问修饰符，允许在本类，派生类或包含该类的程序集
中访问。这也被用于实现继承、

c# 方法


一个方法是把一些相关的语句组织在一起，用来执行一个任务的语句块

每一个c#程序至少有一个带有Main方法的类


c#中定义方法

当定义一个方法时，从根本上说是在声明它的结构的元素，
<Access Specifier><Return Type><Method Name>(Parameter List)
{
	Method Body
}

Access Specifier:访问修饰符，这个决定了变量或方法对于另一个类的可见型
Return type:返回类型，一个方法可以返回一个值。
返回类型是否方法返回的值的数据类型，如果方法不返回任何值，则返回类型为void

Method name:方法名称，是一个唯一标识符，且是大小写敏感的
它不能与类中声明的其他标识符相同
Parameter list:参数列表，使用圆括号括起来，该参数是用来传递和接收方法的数据。
参数列表是指方法的参数类型，顺序和数量，参数是可选的，也即是说，一个方法
可能不包含参数

Method body:方法主体，包含了完成任务所需的指令集

递归方法调用

一个方法可以自我调用。就是递归


参数传递

当调用带有参数的方法时，需要向方法传递参数，在c#中，有三种向方法传递参数的方式：
１．值参数

这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存的值
在这种情况下，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全

２．引用参数

这种方式复制参数的内存位置的引用给形式参数。
这意味着，当形参的值发生改变时，同时也改变实参的值

３．输出参数　　这种方式可以返回多个值


按值传递参数

这是参数传递的默认方式，在这种方式下，当调用一个方法时，会为每一个值参数创建一个
新的存储位置。实际参数的值会复制个形参，
实参和形参使用的是两种不同的内存中的值

所以，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全




即使在函数内改变了值，值也没有发生任何的变化
最大的危机是：没有把每天的提升与长期的目标结合起来！

按引用传递参数

引用参数是一个对变量的内存位置的引用。当按引用传递参数时，与值参数不同的是，
它不会为这些参数创建一个新的存储位置。
引用参数表示与提供方法的实际参数具有相同的内存位置。

按输出传递参数

return语句可用于只从函数中返回一个值。但是，
可以使用输出参数来从函数中返回两个值。
输出参数会把方法输出的数据赋给自己，其他方面与引用参数相似


提供给输出参数的变量不需要赋值。

当需要从一个参数没有指定初始值的方法中返回值时，输出参数特别有用


当上面的代码被编译和执行时，它会产生下列结果(取)


C# 可空类型（Nullable）
